
;; Volume vars
(defpoll VOLUME :interval "1s" `scripts/volume/volume.sh`)

;;Weather
(defpoll WEATHER :interval "1s" `scripts/weather/weather.sh`)

(defpoll BRIGHTNESS :interval "1s" `scripts/system.sh brightness`)
(defpoll MIC :interval "1s" `scripts/system.sh mic`)

(defpoll NOTI :interval "1s" `scripts/notification/noti.sh --status`)
(defvar SCREENSHOT "images/icons/screenshot/screenshot.png")

;;WIDGETS------------------------------------------------------------------------------------------------------------------------


(defwidget notification [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		(button :class "noti" :style "background-image: url('${NOTI}');" :onclick "scripts/notification/noti.sh --toggle")))

(defwidget screenshot [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		(button :class "screenshot" :style "background-image: url('${SCREENSHOT}');" :onclick "scripts/screenshot/screenshot.sh" )))


(defwidget volume [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		    (label :halign "center" :class "volume" :wrap "true" :limit-width 15 :text VOLUME)))

(defwidget mic [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		(button :class "noti" :style "background-image: url('${NOTI}');" :onclick "scripts/notification/noti.sh --toggle")))

(defwidget weather [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		    (label :halign "center" :class "volume" :wrap "true" :limit-width 15 :text WEATHER)))
(defwidget brightness [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		(button :class "noti" :style "background-image: url('${NOTI}');" :onclick "scripts/notification/noti.sh --toggle")))

;; system
(defwidget system [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"     
			(box :class "volume_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconvolume" :text "󰕾")
				(scale :min 0 :max 100 :value VOLUME :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%" ))
			(box :class "brightness_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbrightness" :text "󰃟")
				(scale :min 0 :max 100 :value BRIGHTNESS :onchange "brightnessctl set {}%"))
		  (box :class "mic_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconmic" :text "")
				(scale :min 0 :max 100 :value MIC :onchange "pactl set-source-volume 0 {}%")))))

;;WINDOWS------------------------------------------------------------------------------------------------------------------------
;; notification
(defwindow notification
           :monitor 0
           :geometry (geometry :x "1630px"
                               :y "40px"
                               :width "80px"
                               :height "40px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore true
(notification))


;; screenshot
(defwindow screenshot
           :monitor 0
           :geometry (geometry :x "1810px"
                               :y "40px"
                               :width "80px"
                               :height "40px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore true
(screenshot))


;; volume
(defwindow volume
           :monitor 0
           :geometry (geometry :x "1720px"
                               :y "40px"
                               :width "80px"
                               :height "40px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore true
(volume))


;; mic
(defwindow mic
           :monitor 0
           :geometry (geometry :x "1630px"
                               :y "100px"
                               :width "80px"
                               :height "40px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore true
(mic))


;; brightness
(defwindow brightness
           :monitor 0
           :geometry (geometry 
                                :x "1630px"
                               :y "40px"
                      
                               :width "80px"
                               :height "40px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore true
(brightness))


;; weather
(defwindow weather
           :monitor 0
           :geometry (geometry :x "1720px"
                               :y "100px"
                               :width "80px"
                               :height "40px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore true
(weather))



;; system
(defwindow system
           :monitor 0
           :geometry (geometry :x "1630px"
                               :y "150px"
                               :width "220px"
                               :height "262px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore true
(system))

